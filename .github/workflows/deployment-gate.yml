# This workflow uses ServiceNow custom actions that are certified by ServiceNow.

name: GitHub Deployment Gate Workflow

# on:
#   push:
#     branches: [ main ]
on: workflow_dispatch

jobs:
  build:
    name: 'Build'
    runs-on: ubuntu-latest
    steps:     
      - name: Build Test
        run: echo "Build Test"

  test:
    name: 'Test'
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
              
    - name: ServiceNow DevOps Unit Test Results
      uses: ServiceNow/servicenow-devops-test-report@DEF0543368
      with:
          devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
          instance-url: ${{ secrets.SN_INSTANCE_NAME }}
          tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
          job-name: 'Test' # Should be same name as declared in 'name' clause of the current Stage
          context-github: ${{ toJSON(github) }}
          xml-report-filename: testngutc.xml

  # registerArtifact:
  #   name: 'Register Artifact'
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: ServiceNow DevOps Register Artifact
  #   # You may pin to the exact commit or the version.          
  #     uses: ServiceNow/servicenow-devops-register-artifact@v3.1.0
  #     with:
  #         # Devops Integration Token
  #         devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
  #         # ServiceNow Instance URL
  #         instance-url: ${{ secrets.SN_INSTANCE_NAME }}
  #         # Orchestration Tool Id
  #         tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  #         # Display Name of the Job
  #         job-name: 'Register Artifact'
  #         # Github Context
  #         context-github: ${{ toJSON(github) }}
  #         # List of Artifacts to be registered
  #         artifacts: '[
  #            { 
  #               "name": "app-devops-cicd.jar",
  #               "version": "1.${{ github.run_number }}",
  #               "semanticVersion": "1.${{ github.run_number }}.0",
  #               "repositoryName": "${{ github.repository }}"
  #             }
  #         ]'

  # sonarScan:
  #  name: 'Sonar Scan'
  #  needs: registerArtifact
  #  runs-on: ubuntu-latest
  #  steps:
  #  - name: Checkout
  #    uses: actions/checkout@v4.0.0
  
  #  - name: ServiceNow DevOps Sonar Scan Results
  #  # You may pin to the exact commit or the version.     
  #    uses: ServiceNow/servicenow-devops-sonar@v3.1.0
  #    with:
  #        # ServiceNow Instance URL
  #        instance-url: ${{ secrets.SN_INSTANCE_NAME }}
  #        # Devops Integration Token
  #        devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
  #        # Orchestration Tool Id
  #        tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  #        # Github Context
  #        context-github: ${{ toJSON(github) }}
  #        # Display Name of the Job
  #        job-name: 'Sonar Scan'
  #        # Sonar Host URL
  #        sonar-host-url: ${{ secrets.SONAR_URL }}
  #        # Sonar Project Key
  #        sonar-project-key: ${{ secrets.SONAR_PROJECT_KEY }}

  # registerPackage:
  #   name: 'Register Package'
  #   needs: [sonarScan]
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: ServiceNow DevOps Register Package
  #   # You may pin to the exact commit or the version.           
  #     uses: ServiceNow/servicenow-devops-register-package@v3.1.0
  #     with:
  #         # Devops Integration Token
  #         devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
  #         # ServiceNow Instance URL
  #         instance-url: ${{ secrets.SN_INSTANCE_NAME }}
  #         # Orchestration Tool Id of the tool created in ServiceNow
  #         tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  #         # Github Context
  #         context-github: ${{ toJSON(github) }}
  #         # List of Artifacts in JSON format
  #         artifacts: '[
  #             {
  #                 "name": "app-devops-cicd.jar",
  #                 "version": "1.${{ github.run_number }}",
  #                 "semanticVersion": "1.${{ github.run_number }}.0",
  #                 "repositoryName": "${{ github.repository }}"
  #             }
  #         ]'
  #         # Name of the Package that contains list of artifacts
  #         package-name: 'app-devops-change-velocity-cicd.war'
  #         # Display Name of Job
  #         job-name: 'Register Package'
          
  # change:
  #   name: Change Request
  #   # needs: registerPackage
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:     
  #     - name: ServiceNow DevOps Change Attributes
  #       uses: ServiceNow/servicenow-devops-change@v4.0.0
  #       with:
  #         # devops-integration-user-name: ${{ secrets.SN_DEVOPS_USER }}
  #         # devops-integration-user-password: ${{ secrets.SN_DEVOPS_PASSWORD }}
  #         devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
  #         instance-url: ${{ secrets.SN_INSTANCE_URL }}
  #         tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  #         context-github: ${{ toJSON(github) }}
  #         job-name: 'Change Request'
  #         change-request: '{"setCloseCode":"true","attributes":{"short_description":"Automated Software Deployment","chg_model":"adffaa9e4370211072b7f6be5bb8f2ed","description":"Automated Software Deployment.","assignment_group":"a715cd759f2002002920bde8132e7018","implementation_plan":"Software update is tested and results can be found in Test Summaries Tab; When the change is approved the implementation happens automated by the CICD pipeline within the change planned start and end time window.","backout_plan":"When software fails in production, the previous software release will be re-deployed.","test_plan":"Testing if the software was successfully deployed"}}'
  #         deployment-gate: '{"environment":"deployment_gate","jobName":"Deploy"}'
  #         # You can specify the requested_by attribute either with name or sys_id. Example: "requested_by":{"name": "Test User"} or "requested_by": "62826bf03710200044e0bfc8bcbe5df1"
  #         # You can specify the assignment_group attribute either with name or sys_id. Example: "assignment_group":{"name": "Change Approval Team"} or "assignment_group": "5f721d93c0a8010e015533746de18bf9"
  #         # start_date: Enter the planned start date
  #         # end_date: Enter the planned end date
  # deploy:
  #   name: 'Deploy'
  #   needs: change
  #   runs-on: ubuntu-latest
  #   environment: deployment_gate
  #   steps:
  #     - name: Run deployment scripts
  #       run: echo Completed Deployment. 
        
  # getchange:
  #   # jobs that must complete successfully before this job will run
  #   needs: deploy
  #   # type of machine to run the job on
  #   runs-on: ubuntu-latest
  #   name: 'ServiceNow DevOps Get Change'
  #   outputs:
  #     change-request-number: ${{ steps.get_change.outputs.change-request-number }}
  #   steps:
  #     - name: ServiceNow DevOps Get Change
  #       # You may pin to the exact commit or the version.
  #       # uses: ServiceNow/servicenow-devops-get-change@0f8b1914adeaec764a4286bdd9cba73ed1c6097f
  #       uses: ServiceNow/servicenow-devops-get-change@v3.1.0
  #       id: get_change
  #       with:
  #         # ServiceNow Instance URL
  #         instance-url: ${{ secrets.SN_INSTANCE_NAME }}
  #         # Devops Integration Token
  #         devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
  #         # Orchestration Tool Id
  #         tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  #         # Github Context
  #         context-github: ${{ toJSON(github) }}
  #         # The inputs to identify change at Servicenow and GET it.
  #         change-details: '{"build_number":"${{github.run_id}}","pipeline_name":"${{github.repository}}/${{github.workflow}}","stage_name":"Deploy"}'

  #     - name: Output of ServiceNow DevOps Get Change
  #       run: echo 'Output of ServiceNow DevOps Get Change is -> change-request-number = ${{ steps.get_change.outputs.change-request-number }}' >> $GITHUB_OUTPUT

  # updatechange:
  #   # jobs that must complete successfully before this job will run
  #   needs: getchange
  #   # type of machine to run the job on
  #   runs-on: ubuntu-latest
  #   name: 'ServiceNow DevOps Update Change'
  #   steps:
  #     - name: ServiceNow DevOps Update Change
  #       # You may pin to the exact commit or the version.
  #       # uses: ServiceNow/servicenow-devops-update-change@66d51cb13684d8287a763bc3f4dc4531c6ab3306
  #       uses: ServiceNow/servicenow-devops-update-change@v3.1.0
  #       id: update_change
  #       with:
  #         # ServiceNow Instance URL
  #         instance-url: ${{ secrets.SN_INSTANCE_NAME }}
  #         # ServiceNow Devops security token
  #         devops-integration-token: ${{ secrets.SN_DEVOPS_TOKEN }}
  #         # Orchestration Tool Id of the tool created in ServiceNow
  #         tool-id: ${{ secrets.SN_ORCHESTRATION_TOOL_ID }}
  #         # Github Context
  #         context-github: ${{ toJSON(github) }}
  #         # Change Request Number to be Updated
  #         change-request-number: ${{needs.getchange.outputs.change-request-number}}
  #         # The customized inputs to create change with the requested details.
  #         change-request-details: '{"state":"3","close_code":"successful_issues","close_notes":"Test results successful"}'
          
      # - name: Outcome of ServiceNow DevOps Update Change
      #   run: echo 'Outcome of ServiceNow DevOps Update Change is -> ${{ steps.update_change.outputs.status }}'  >> $GITHUB_OUTPUT
